apply plugin: 'com.android.library'

/**
 * Extra properties used by the project.
 */
ext {
    // String property to store version name.
    stringVersion = "11.9.1.0"
    // String property used to set the name of the Jar created by makeJar task.
    stringJarName = 'TapjoyAdapter.jar'
    // String property used to set the name of the archive created by makeZip task.
    stringZipName = 'AdapterTapjoyAndroid-' + stringVersion
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    provided files('libs/tapjoyconnectlibrary.jar')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.google.firebase:firebase-ads:9.8.0'
    testCompile 'junit:junit:4.12'
}

/**
 * Delete task to delete any previously generated .jar files by makeJar task. makeJar depends on
 * this task.
 */
task clearJar(type: Delete) {
    // Targets to be deleted.
    delete('build/libs/' + stringJarName)
}

/**
 * Copy task used to copy the build files. This task depends on clearJar and build tasks.
 */
task makeJar(type: Copy) {
    // Targets to be copied from.
    from('build/intermediates/bundles/release/')
    // Targets to copy into.
    into('build/libs/')
    // Files to include.
    include('classes.jar')
    // Rename file.
    rename('classes.jar', stringJarName)
}

/**
 * Add dependency tasks for makeJar.
 */
makeJar.dependsOn(clearJar, build)

/**
 * Delete task to delete any previously generated .zip files by makeZip task. makeZip depends on
 * this task.
 */
task clearZip(type: Delete) {
    // Targets to be deleted.
    delete('build/libs/' + stringZipName + '.zip')
}

/**
 * Zip task to make a zip archive. This task depends on makeJar and clearZip tasks.
 */
task makeZip(type: Zip) {
    // Targets to be added to the zip archive.
    from('build/libs/' + stringJarName, '../README.md', '../CHANGELOG.md')
    // Root directory name for the zip archive.
    into(stringZipName)
    // Name of the zip archive.
    archiveName stringZipName + '.zip'
    // Destination directory in which the archive needs to be saved.
    destinationDir file('build/libs')
}

/**
 * Add dependency tasks for makeZip.
 */
makeZip.dependsOn(makeJar, clearZip, build)
makeZip.mustRunAfter makeJar
build.mustRunAfter clean
makeJar.mustRunAfter build
makeJar.mustRunAfter clearJar
